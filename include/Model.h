#ifndef MODEL_H
#define MODEL_H

//----------------------------------------------------------------------------------------------------------------------
/// @file Model.h
/// @brief This is a simple model class for loading in mesh data for OpenGL drawing.
/// @brief This class depends upon the Assimp model importer library
/// @author Toby Gilber & Declan Russell
/// @version 1.0
/// @date ?/?/15
/// @class Model
//----------------------------------------------------------------------------------------------------------------------


#ifdef DARWIN
    #include <OpenGL/gl3.h>
#else
    #include <GL/glew.h>
    #ifndef WIN32
        #include <GL/gl.h>
    #endif
#endif
#include <iostream>
#include <string>
#include <glm/glm.hpp>
#include <vector>
class Model{
public:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Standerd constructor for loading in models from source directory
    /// @param _path - path to model location
    //----------------------------------------------------------------------------------------------------------------------
    Model(std::string _path);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief defualt constructer. Will likely be depricated soon.
    //----------------------------------------------------------------------------------------------------------------------
    Model();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief default destructor
    //----------------------------------------------------------------------------------------------------------------------
    ~Model();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief loads a model into our OpenGL buffers
    //----------------------------------------------------------------------------------------------------------------------
    void loadModel(std::string _path);
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns the VAO handle of the models GL buffer
    //----------------------------------------------------------------------------------------------------------------------
    inline GLuint getVAO(){return m_VAO;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief Loads a cube into our GL buffer. Used for testing.
    //----------------------------------------------------------------------------------------------------------------------
    void loadCube();
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns the number of vertices in our mesh
    //----------------------------------------------------------------------------------------------------------------------
    inline GLuint getNumVerts(){return m_numVerts;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns the number of normals in our mesh
    //----------------------------------------------------------------------------------------------------------------------
    inline GLuint getNumNormals(){return m_numNormals;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns the number of tangents in our mesh
    //----------------------------------------------------------------------------------------------------------------------
    inline GLuint getNumTangents(){return m_numTangents;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns the number of texture coords in our mesh
    //----------------------------------------------------------------------------------------------------------------------
    inline GLuint getNumTexCoords(){return m_numTexCoords;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns the number of faces in our mesh
    //----------------------------------------------------------------------------------------------------------------------
    inline GLuint getNumFaces(){return m_numFaces;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns the number of indicies in our mesh
    //----------------------------------------------------------------------------------------------------------------------
    inline GLuint getNumIndicies(){return m_numIndicies;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns our vertices VBO handle
    //----------------------------------------------------------------------------------------------------------------------
    inline GLuint getVertexVBO(){return m_vertexVBO;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns our normals VBO handle
    //----------------------------------------------------------------------------------------------------------------------
    inline GLuint getNormalVBO(){return m_normalsVBO;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns our tangents VBO handle
    //----------------------------------------------------------------------------------------------------------------------
    inline GLuint getTangentVBO(){return m_tangentsVBO;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns our texture coord VBO handle
    //----------------------------------------------------------------------------------------------------------------------
    inline GLuint getTexCoordVBO(){return m_textureVBO;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns our indicies coord VBO handle
    //----------------------------------------------------------------------------------------------------------------------
    inline GLuint getIndiciesVBO(){return m_indiciesVBO;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns our host side verticies
    //----------------------------------------------------------------------------------------------------------------------
    inline const std::vector<glm::vec3> getVerticies(){return m_vertexs;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns our host side normals
    //----------------------------------------------------------------------------------------------------------------------
    inline const std::vector<glm::vec3> getNormals(){return m_normals;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns our host side texture coords
    //----------------------------------------------------------------------------------------------------------------------
    inline const std::vector<glm::vec3> getTexCoords(){return m_textureCoords;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief returns our host side indicies
    //----------------------------------------------------------------------------------------------------------------------
    inline const std::vector<glm::ivec3> getIndicies(){return m_indices;}
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief clears model loaded and removes allocated buffers
    //----------------------------------------------------------------------------------------------------------------------
    void clearModel();
    //----------------------------------------------------------------------------------------------------------------------
private:
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief boolean to indicate if a model has been loaded.
    //----------------------------------------------------------------------------------------------------------------------
    bool m_modelLoaded;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our host side vertex data
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<glm::vec3> m_vertexs;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our host side normal data
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<glm::vec3> m_normals;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our host side tangent data
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<glm::vec3> m_tangents;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our host side texture coords
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<glm::vec3> m_textureCoords;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief our host side face indices
    //----------------------------------------------------------------------------------------------------------------------
    std::vector<glm::ivec3> m_indices;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief vertex VBO handle
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_vertexVBO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief normal VBO handle
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_normalsVBO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief texture VBO handle
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_textureVBO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief tangent VBO handle
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_tangentsVBO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief indices VBO handle
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_indiciesVBO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief model VAO handle
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_VAO;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief number of vertecies in model
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_numVerts;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief number of normals in model
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_numNormals;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief number of tangents in model
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_numTangents;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief number of texture coords in model
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_numTexCoords;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief number of faces in model
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_numFaces;
    //----------------------------------------------------------------------------------------------------------------------
    /// @brief number of indices in model
    //----------------------------------------------------------------------------------------------------------------------
    GLuint m_numIndicies;
    //----------------------------------------------------------------------------------------------------------------------

};
#endif
